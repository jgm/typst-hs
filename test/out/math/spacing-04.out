--- parse tree ---
[ Code
    "test/typ/math/spacing-04.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/spacing-04.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/spacing-04.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/math/spacing-04.typ"
    ( line 3 , column 2 )
    (Set
       (Ident (Identifier "page"))
       [ KeyValArg (Identifier "width") (Literal Auto) ])
, SoftBreak
, Equation
    False
    [ Text "a"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 4 , column 4 )
        (Ident (Identifier "equiv"))
    , Text "b"
    , Text "+"
    , Text "c"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 4 , column 16 )
        (Ident (Identifier "minus"))
    , Text "d"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 4 , column 20 )
        (FieldAccess
           (Ident (Identifier "r"))
           (FieldAccess
              (Ident (Identifier "double")) (Ident (Identifier "arrow"))))
    , Text "e"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 4 , column 25 )
        (Ident (Identifier "log"))
    , Text "5"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 4 , column 31 )
        (FuncCall (Ident (Identifier "op")) [ BlockArg [ Text "ln" ] ])
    , Text "6"
    ]
, Space
, HardBreak
, Equation
    False
    [ Text "a"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 5 , column 4 )
        (FuncCall
           (Ident (Identifier "cancel"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 5 , column 11 )
                   (Ident (Identifier "equiv"))
               ]
           ])
    , Text "b"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 5 , column 20 )
        (FuncCall
           (Ident (Identifier "overline")) [ BlockArg [ Text "+" ] ])
    , Text "c"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 5 , column 34 )
        (FuncCall
           (Ident (Identifier "arrow"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 5 , column 40 )
                   (Ident (Identifier "minus"))
               ]
           ])
    , Text "d"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 5 , column 45 )
        (FuncCall
           (Ident (Identifier "hat"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 5 , column 49 )
                   (FieldAccess
                      (Ident (Identifier "r"))
                      (FieldAccess
                         (Ident (Identifier "double")) (Ident (Identifier "arrow"))))
               ]
           ])
    , Text "e"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 5 , column 55 )
        (FuncCall
           (Ident (Identifier "cancel"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 5 , column 62 )
                   (Ident (Identifier "log"))
               ]
           ])
    , Text "5"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 5 , column 69 )
        (FuncCall
           (Ident (Identifier "dot"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 5 , column 73 )
                   (FuncCall (Ident (Identifier "op")) [ BlockArg [ Text "ln" ] ])
               ]
           ])
    , Text "6"
    ]
, Space
, HardBreak
, Equation
    False
    [ Text "a"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 6 , column 4 )
        (FuncCall
           (Ident (Identifier "overbrace"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 6 , column 14 )
                   (Ident (Identifier "equiv"))
               ]
           ])
    , Text "b"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 6 , column 23 )
        (FuncCall
           (Ident (Identifier "underline")) [ BlockArg [ Text "+" ] ])
    , Text "c"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 6 , column 38 )
        (FuncCall
           (Ident (Identifier "grave"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 6 , column 44 )
                   (Ident (Identifier "minus"))
               ]
           ])
    , Text "d"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 6 , column 49 )
        (FuncCall
           (Ident (Identifier "underbracket"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 6 , column 62 )
                   (FieldAccess
                      (Ident (Identifier "r"))
                      (FieldAccess
                         (Ident (Identifier "double")) (Ident (Identifier "arrow"))))
               ]
           ])
    , Text "e"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 6 , column 68 )
        (FuncCall
           (Ident (Identifier "circle"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 6 , column 75 )
                   (Ident (Identifier "log"))
               ]
           ])
    , Text "5"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 6 , column 82 )
        (FuncCall
           (Ident (Identifier "caron"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 6 , column 88 )
                   (FuncCall (Ident (Identifier "op")) [ BlockArg [ Text "ln" ] ])
               ]
           ])
    , Text "6"
    ]
, Space
, HardBreak
, HardBreak
, Equation
    False
    [ Text "a"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 8 , column 4 )
        (FuncCall
           (Ident (Identifier "attach"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 8 , column 11 )
                   (Ident (Identifier "equiv"))
               ]
           , KeyValArg (Identifier "tl") (Block (Content [ Text "a" ]))
           , KeyValArg (Identifier "tr") (Block (Content [ Text "b" ]))
           ])
    , Text "b"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 8 , column 34 )
        (FuncCall
           (Ident (Identifier "attach"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 8 , column 41 )
                   (FuncCall (Ident (Identifier "limits")) [ BlockArg [ Text "+" ] ])
               ]
           , KeyValArg (Identifier "t") (Block (Content [ Text "a" ]))
           , KeyValArg (Identifier "b") (Block (Content [ Text "b" ]))
           ])
    , Text "c"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 8 , column 66 )
        (FuncCall
           (Ident (Identifier "tilde"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 8 , column 72 )
                   (Ident (Identifier "minus"))
               ]
           ])
    , Text "d"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 8 , column 77 )
        (FuncCall
           (Ident (Identifier "breve"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 8 , column 83 )
                   (FieldAccess
                      (Ident (Identifier "r"))
                      (FieldAccess
                         (Ident (Identifier "double")) (Ident (Identifier "arrow"))))
               ]
           ])
    , Text "e"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 8 , column 89 )
        (FuncCall
           (Ident (Identifier "attach"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 8 , column 96 )
                   (FuncCall
                      (Ident (Identifier "limits"))
                      [ BlockArg
                          [ Code
                              "test/typ/math/spacing-04.typ"
                              ( line 8 , column 103 )
                              (Ident (Identifier "log"))
                          ]
                      ])
               ]
           , KeyValArg (Identifier "t") (Block (Content [ Text "a" ]))
           , KeyValArg (Identifier "b") (Block (Content [ Text "b" ]))
           ])
    , Text "5"
    , Code
        "test/typ/math/spacing-04.typ"
        ( line 8 , column 123 )
        (FuncCall
           (Ident (Identifier "attach"))
           [ BlockArg
               [ Code
                   "test/typ/math/spacing-04.typ"
                   ( line 8 , column 130 )
                   (FuncCall (Ident (Identifier "op")) [ BlockArg [ Text "ln" ] ])
               ]
           , KeyValArg (Identifier "tr") (Block (Content [ Text "a" ]))
           , KeyValArg (Identifier "bl") (Block (Content [ Text "b" ]))
           ])
    , Text "6"
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  text(body: [
]), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        text(body: [≡]), 
                        text(body: [b]), 
                        text(body: [+]), 
                        text(body: [c]), 
                        text(body: [−]), 
                        text(body: [d]), 
                        text(body: [⇒]), 
                        text(body: [e]), 
                        math.op(limits: false, 
                                text: "log"), 
                        text(body: [5]), 
                        math.op(text: text(body: [ln])), 
                        text(body: [6]) }, 
                numbering: none), 
  text(body: [ ]), 
  linebreak(), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        math.cancel(body: text(body: [≡])), 
                        text(body: [b]), 
                        math.overline(body: text(body: [+])), 
                        text(body: [c]), 
                        math.accent(accent: →, 
                                    base: text(body: [−])), 
                        text(body: [d]), 
                        math.accent(accent: ^, 
                                    base: text(body: [⇒])), 
                        text(body: [e]), 
                        math.cancel(body: math.op(limits: false, 
                                                  text: "log")), 
                        text(body: [5]), 
                        math.accent(accent: ⋅, 
                                    base: math.op(text: text(body: [ln]))), 
                        text(body: [6]) }, 
                numbering: none), 
  text(body: [ ]), 
  linebreak(), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        math.overbrace(body: text(body: [≡])), 
                        text(body: [b]), 
                        math.underline(body: text(body: [+])), 
                        text(body: [c]), 
                        math.accent(accent: `, 
                                    base: text(body: [−])), 
                        text(body: [d]), 
                        math.underbracket(body: text(body: [⇒])), 
                        text(body: [e]), 
                        math.accent(accent: ○, 
                                    base: math.op(limits: false, 
                                                  text: "log")), 
                        text(body: [5]), 
                        math.accent(accent: ˇ, 
                                    base: math.op(text: text(body: [ln]))), 
                        text(body: [6]) }, 
                numbering: none), 
  text(body: [ ]), 
  linebreak(), 
  linebreak(), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        math.attach(base: text(body: [≡]), 
                                    tl: text(body: [a]), 
                                    tr: text(body: [b])), 
                        text(body: [b]), 
                        math.attach(b: text(body: [b]), 
                                    base: math.limits(body: text(body: [+])), 
                                    t: text(body: [a])), 
                        text(body: [c]), 
                        math.accent(accent: ∼, 
                                    base: text(body: [−])), 
                        text(body: [d]), 
                        math.accent(accent: ˘, 
                                    base: text(body: [⇒])), 
                        text(body: [e]), 
                        math.attach(b: text(body: [b]), 
                                    base: math.limits(body: math.op(limits: false, 
                                                                    text: "log")), 
                                    t: text(body: [a])), 
                        text(body: [5]), 
                        math.attach(base: math.op(text: text(body: [ln])), 
                                    bl: text(body: [b]), 
                                    tr: text(body: [a])), 
                        text(body: [6]) }, 
                numbering: none), 
  parbreak() }
