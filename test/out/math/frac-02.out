--- parse tree ---
[ Code
    "test/typ/math/frac-02.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/frac-02.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/frac-02.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "x"
    , Text "="
    , MFrac
        (MGroup
           (Just "(")
           (Just ")")
           [ Code
               "test/typ/math/frac-02.typ"
               ( line 3 , column 8 )
               (Ident (Identifier "minus"))
           , Text "b"
           , Code
               "test/typ/math/frac-02.typ"
               ( line 3 , column 11 )
               (FieldAccess
                  (Ident (Identifier "minus")) (Ident (Identifier "plus")))
           , Code
               "test/typ/math/frac-02.typ"
               ( line 3 , column 22 )
               (FuncCall
                  (Ident (Identifier "sqrt"))
                  [ BlockArg
                      [ MAttach Nothing (Just (Text "2")) (Text "b")
                      , Code
                          "test/typ/math/frac-02.typ"
                          ( line 3 , column 31 )
                          (Ident (Identifier "minus"))
                      , Text "4"
                      , Text "a"
                      , Text "c"
                      ]
                  ])
           ])
        (MGroup Nothing Nothing [ Text "2" , Text "a" ])
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { text(body: [x]), 
                        text(body: [=]), 
                        math.frac(denom: { text(body: [2]), 
                                           text(body: [a]) }, 
                                  num: { text(body: [−]), 
                                         text(body: [b]), 
                                         text(body: [±]), 
                                         math.sqrt(radicand: { math.attach(b: none, 
                                                                           base: text(body: [b]), 
                                                                           t: text(body: [2])), 
                                                               text(body: [−]), 
                                                               text(body: [4]), 
                                                               text(body: [a]), 
                                                               text(body: [c]) }) }) }, 
                numbering: none), 
  parbreak() }
