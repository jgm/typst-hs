--- parse tree ---
[ Code
    "test/typ/math/numbering-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/numbering-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/numbering-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Code
    "test/typ/math/numbering-00.typ"
    ( line 2 , column 2 )
    (Set
       (Ident (Identifier "page"))
       [ KeyValArg (Identifier "width") (Literal (Numeric 150.0 Pt)) ])
, SoftBreak
, Code
    "test/typ/math/numbering-00.typ"
    ( line 3 , column 2 )
    (Set
       (FieldAccess
          (Ident (Identifier "equation")) (Ident (Identifier "math")))
       [ KeyValArg (Identifier "numbering") (Literal (String "(I)")) ])
, ParBreak
, Text "We"
, Space
, Text "define"
, Space
, Equation False [ Text "x" ]
, Space
, Text "in"
, Space
, Text "preparation"
, Space
, Text "of"
, Space
, Ref "fib" (Literal Auto)
, Text ":"
, SoftBreak
, Equation
    True
    [ Code
        "test/typ/math/numbering-00.typ"
        ( line 6 , column 3 )
        (FieldAccess (Ident (Identifier "alt")) (Ident (Identifier "phi")))
    , Code
        "test/typ/math/numbering-00.typ"
        ( line 6 , column 11 )
        (FieldAccess
           (Ident (Identifier "eq")) (Ident (Identifier "colon")))
    , MFrac
        (MGroup
           (Just "(")
           (Just ")")
           [ Text "1"
           , Text "+"
           , Code
               "test/typ/math/numbering-00.typ"
               ( line 6 , column 19 )
               (FuncCall (Ident (Identifier "sqrt")) [ BlockArg [ Text "5" ] ])
           ])
        (Text "2")
    ]
, Space
, Code
    "test/typ/math/numbering-00.typ"
    ( line 6 , column 34 )
    (Label "ratio")
, ParBreak
, Text "With"
, Space
, Ref "ratio" (Literal Auto)
, Text ","
, Space
, Text "we"
, Space
, Text "get"
, SoftBreak
, Equation
    True
    [ MAttach (Just (Text "n")) Nothing (Text "F")
    , Text "="
    , Code
        "test/typ/math/numbering-00.typ"
        ( line 9 , column 9 )
        (FuncCall
           (Ident (Identifier "round"))
           [ BlockArg
               [ MFrac
                   (Text "1")
                   (Code
                      "test/typ/math/numbering-00.typ"
                      ( line 9 , column 19 )
                      (FuncCall (Ident (Identifier "sqrt")) [ BlockArg [ Text "5" ] ]))
               , MAttach
                   Nothing
                   (Just (Text "n"))
                   (Code
                      "test/typ/math/numbering-00.typ"
                      ( line 9 , column 27 )
                      (FieldAccess
                         (Ident (Identifier "alt")) (Ident (Identifier "phi"))))
               ]
           ])
    ]
, Space
, Code
    "test/typ/math/numbering-00.typ"
    ( line 9 , column 40 )
    (Label "fib")
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  text(body: [
]), 
  parbreak(), 
  text(body: [We define ]), 
  math.equation(block: false, 
                body: text(body: [x]), 
                numbering: none), 
  text(body: [ in preparation of ]), 
  ref(supplement: auto, 
      target: ), 
  text(body: [:
]), 
  math.equation(block: true, 
                body: { text(body: [ϕ]), 
                        text(body: [≔]), 
                        math.frac(denom: text(body: [2]), 
                                  num: { text(body: [1]), 
                                         text(body: [+]), 
                                         math.sqrt(radicand: text(body: [5])) }) }, 
                numbering: none), 
  text(body: [ ]), 
  <ratio>, 
  parbreak(), 
  text(body: [With ]), 
  ref(supplement: auto, 
      target: ), 
  text(body: [, we get
]), 
  math.equation(block: true, 
                body: { math.attach(b: text(body: [n]), 
                                    base: text(body: [F]), 
                                    t: none), 
                        text(body: [=]), 
                        math.round(body: { math.frac(denom: math.sqrt(radicand: text(body: [5])), 
                                                     num: text(body: [1])), 
                                           math.attach(b: none, 
                                                       base: text(body: [ϕ]), 
                                                       t: text(body: [n])) }) }, 
                numbering: none), 
  text(body: [ ]), 
  <fib>, 
  parbreak() }
