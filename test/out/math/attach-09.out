--- parse tree ---
[ Code
    "test/typ/math/attach-09.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/attach-09.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/attach-09.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ MAttach
        (Just (Text "1"))
        (Just (Text "2"))
        (Code
           "test/typ/math/attach-09.typ"
           ( line 3 , column 3 )
           (FuncCall (Ident (Identifier "limits")) [ BlockArg [ Text "A" ] ]))
    , Code
        "test/typ/math/attach-09.typ"
        ( line 3 , column 17 )
        (FieldAccess (Ident (Identifier "not")) (Ident (Identifier "eq")))
    , MAttach (Just (Text "1")) (Just (Text "2")) (Text "A")
    ]
, SoftBreak
, Equation
    True
    [ MAttach
        (Just (Text "1"))
        (Just (Text "2"))
        (Code
           "test/typ/math/attach-09.typ"
           ( line 4 , column 3 )
           (FuncCall
              (Ident (Identifier "scripts"))
              [ BlockArg
                  [ Code
                      "test/typ/math/attach-09.typ"
                      ( line 4 , column 11 )
                      (Ident (Identifier "sum"))
                  ]
              ]))
    , Code
        "test/typ/math/attach-09.typ"
        ( line 4 , column 20 )
        (FieldAccess (Ident (Identifier "not")) (Ident (Identifier "eq")))
    , MAttach
        (Just (Text "1"))
        (Just (Text "2"))
        (Code
           "test/typ/math/attach-09.typ"
           ( line 4 , column 23 )
           (Ident (Identifier "sum")))
    ]
, SoftBreak
, Equation
    True
    [ MAttach
        (Just (Text "a"))
        (Just (Text "b"))
        (Code
           "test/typ/math/attach-09.typ"
           ( line 5 , column 3 )
           (FuncCall
              (Ident (Identifier "limits"))
              [ BlockArg
                  [ Code
                      "test/typ/math/attach-09.typ"
                      ( line 5 , column 10 )
                      (Ident (Identifier "integral"))
                  ]
              ]))
    , Code
        "test/typ/math/attach-09.typ"
        ( line 5 , column 24 )
        (FieldAccess (Ident (Identifier "not")) (Ident (Identifier "eq")))
    , MAttach
        (Just (Text "a"))
        (Just (Text "b"))
        (Code
           "test/typ/math/attach-09.typ"
           ( line 5 , column 27 )
           (Ident (Identifier "integral")))
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { math.attach(b: text(body: [1]), 
                                    base: math.limits(body: text(body: [A])), 
                                    t: text(body: [2])), 
                        text(body: [≠]), 
                        math.attach(b: text(body: [1]), 
                                    base: text(body: [A]), 
                                    t: text(body: [2])) }, 
                numbering: none), 
  text(body: [
]), 
  math.equation(block: true, 
                body: { math.attach(b: text(body: [1]), 
                                    base: math.scripts(body: text(body: [∑])), 
                                    t: text(body: [2])), 
                        text(body: [≠]), 
                        math.attach(b: text(body: [1]), 
                                    base: text(body: [∑]), 
                                    t: text(body: [2])) }, 
                numbering: none), 
  text(body: [
]), 
  math.equation(block: true, 
                body: { math.attach(b: text(body: [a]), 
                                    base: math.limits(body: text(body: [∫])), 
                                    t: text(body: [b])), 
                        text(body: [≠]), 
                        math.attach(b: text(body: [a]), 
                                    base: text(body: [∫]), 
                                    t: text(body: [b])) }, 
                numbering: none), 
  parbreak() }
