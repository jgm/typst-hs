--- parse tree ---
[ Code
    "test/typ/math/accent-02.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/accent-02.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/accent-02.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ Code
        "test/typ/math/accent-02.typ"
        ( line 3 , column 2 )
        (FuncCall
           (Ident (Identifier "accent"))
           [ BlockArg [ Text "\246" ] , BlockArg [ Text "." ] ])
    , Text ","
    , Code
        "test/typ/math/accent-02.typ"
        ( line 3 , column 16 )
        (FuncCall
           (Ident (Identifier "accent"))
           [ BlockArg [ Text "v" ]
           , BlockArg
               [ Code
                   "test/typ/math/accent-02.typ"
                   ( line 3 , column 26 )
                   (FieldAccess (Ident (Identifier "l")) (Ident (Identifier "arrow")))
               ]
           ])
    , Text ","
    , Code
        "test/typ/math/accent-02.typ"
        ( line 3 , column 31 )
        (FuncCall
           (Ident (Identifier "accent"))
           [ BlockArg
               [ Code
                   "test/typ/math/accent-02.typ"
                   ( line 3 , column 38 )
                   (Ident (Identifier "ZZ"))
               ]
           , BlockArg [ Text "\771" ]
           ])
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: false, 
                body: { math.accent(accent: text(body: [.]), 
                                    base: text(body: [ö])), 
                        text(body: [,]), 
                        math.accent(accent: text(body: [←]), 
                                    base: text(body: [v])), 
                        text(body: [,]), 
                        math.accent(accent: text(body: [̃]), 
                                    base: text(body: [ℤ])) }, 
                numbering: none), 
  parbreak() }
