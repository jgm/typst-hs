--- parse tree ---
[ Code
    "test/typ/math/underover-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/underover-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/underover-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "x"
    , Text "="
    , Code
        "test/typ/math/underover-00.typ"
        ( line 3 , column 7 )
        (FuncCall
           (Ident (Identifier "underbrace"))
           [ BlockArg
               [ Text "1"
               , Text "+"
               , Text "2"
               , Text "+"
               , Code
                   "test/typ/math/underover-00.typ"
                   ( line 4 , column 11 )
                   (FieldAccess (Ident (Identifier "h")) (Ident (Identifier "dots")))
               , Text "+"
               , Text "5"
               ]
           , BlockArg
               [ Code
                   "test/typ/math/underover-00.typ"
                   ( line 5 , column 3 )
                   (FuncCall
                      (Ident (Identifier "underbrace"))
                      [ BlockArg [ Text "numbers" ]
                      , BlockArg [ Text "x" , Text "+" , Text "y" ]
                      ])
               ]
           ])
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { text(body: [x]), 
                        text(body: [=]), 
                        math.underbrace(annotation: math.underbrace(annotation: { text(body: [x]), 
                                                                                  text(body: [+]), 
                                                                                  text(body: [y]) }, 
                                                                    body: text(body: [numbers])), 
                                        body: { text(body: [1]), 
                                                text(body: [+]), 
                                                text(body: [2]), 
                                                text(body: [+]), 
                                                text(body: [â€¦]), 
                                                text(body: [+]), 
                                                text(body: [5]) }) }, 
                numbering: none), 
  parbreak() }
