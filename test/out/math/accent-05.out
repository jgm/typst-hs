--- parse tree ---
[ Code
    "test/typ/math/accent-05.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/accent-05.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/accent-05.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ MAttach Nothing (Just (Text "x")) (Text "A")
    , Code
        "test/typ/math/accent-05.typ"
        ( line 3 , column 6 )
        (FieldAccess (Ident (Identifier "not")) (Ident (Identifier "eq")))
    , MAttach
        Nothing
        (Just (Text "x"))
        (Code
           "test/typ/math/accent-05.typ"
           ( line 3 , column 9 )
           (FuncCall (Ident (Identifier "hat")) [ BlockArg [ Text "A" ] ]))
    , Code
        "test/typ/math/accent-05.typ"
        ( line 3 , column 18 )
        (FieldAccess (Ident (Identifier "not")) (Ident (Identifier "eq")))
    , MAttach
        Nothing
        (Just (Text "x"))
        (Code
           "test/typ/math/accent-05.typ"
           ( line 3 , column 21 )
           (FuncCall
              (Ident (Identifier "hat"))
              [ BlockArg
                  [ Code
                      "test/typ/math/accent-05.typ"
                      ( line 3 , column 25 )
                      (FuncCall (Ident (Identifier "hat")) [ BlockArg [ Text "A" ] ])
                  ]
              ]))
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: false, 
                body: { math.attach(b: none, 
                                    base: text(body: [A]), 
                                    t: text(body: [x])), 
                        text(body: [≠]), 
                        math.attach(b: none, 
                                    base: math.accent(accent: ^, 
                                                      base: text(body: [A])), 
                                    t: text(body: [x])), 
                        text(body: [≠]), 
                        math.attach(b: none, 
                                    base: math.accent(accent: ^, 
                                                      base: math.accent(accent: ^, 
                                                                        base: text(body: [A]))), 
                                    t: text(body: [x])) }, 
                numbering: none), 
  parbreak() }
