--- parse tree ---
[ Code
    "test/typ/math/op-03.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/op-03.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/op-03.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ MAttach
        (Just
           (MGroup
              Nothing
              Nothing
              [ Text "x"
              , Code
                  "test/typ/math/op-03.typ"
                  ( line 3 , column 32 )
                  (FieldAccess
                     (Ident (Identifier "eq")) (Ident (Identifier "colon")))
              , Text "1"
              ]))
        Nothing
        (Code
           "test/typ/math/op-03.typ"
           ( line 3 , column 3 )
           (FuncCall
              (Ident (Identifier "op"))
              [ BlockArg [ Text "myop" ]
              , KeyValArg (Identifier "limits") (Literal (Boolean False))
              ]))
    , Text "x"
    , HardBreak
    , MAttach
        (Just
           (MGroup
              Nothing
              Nothing
              [ Text "x"
              , Code
                  "test/typ/math/op-03.typ"
                  ( line 4 , column 31 )
                  (FieldAccess
                     (Ident (Identifier "eq")) (Ident (Identifier "colon")))
              , Text "1"
              ]))
        Nothing
        (Code
           "test/typ/math/op-03.typ"
           ( line 4 , column 3 )
           (FuncCall
              (Ident (Identifier "op"))
              [ BlockArg [ Text "myop" ]
              , KeyValArg (Identifier "limits") (Literal (Boolean True))
              ]))
    , Text "x"
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { math.attach(b: { text(body: [x]), 
                                         text(body: [≔]), 
                                         text(body: [1]) }, 
                                    base: math.op(limits: false, 
                                                  text: text(body: [myop])), 
                                    t: none), 
                        text(body: [x]), 
                        linebreak(), 
                        math.attach(b: { text(body: [x]), 
                                         text(body: [≔]), 
                                         text(body: [1]) }, 
                                    base: math.op(limits: true, 
                                                  text: text(body: [myop])), 
                                    t: none), 
                        text(body: [x]) }, 
                numbering: none), 
  parbreak() }
