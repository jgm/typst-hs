--- parse tree ---
[ Code
    "test/typ/math/spacing-02.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/spacing-02.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/spacing-02.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ Text "a"
    , Code
        "test/typ/math/spacing-02.typ"
        ( line 3 , column 4 )
        (Ident (Identifier "thin"))
    , Text "b"
    , Text ","
    , Text "a"
    , Code
        "test/typ/math/spacing-02.typ"
        ( line 3 , column 14 )
        (Ident (Identifier "med"))
    , Text "b"
    , Text ","
    , Text "a"
    , Code
        "test/typ/math/spacing-02.typ"
        ( line 3 , column 23 )
        (Ident (Identifier "thick"))
    , Text "b"
    , Text ","
    , Text "a"
    , Code
        "test/typ/math/spacing-02.typ"
        ( line 3 , column 34 )
        (Ident (Identifier "quad"))
    , Text "b"
    ]
, Space
, HardBreak
, Equation
    False
    [ Text "a"
    , Text "="
    , Code
        "test/typ/math/spacing-02.typ"
        ( line 4 , column 6 )
        (Ident (Identifier "thin"))
    , Text "b"
    ]
, Space
, HardBreak
, Equation
    False
    [ Text "a"
    , Text "-"
    , Text "b"
    , Code
        "test/typ/math/spacing-02.typ"
        ( line 5 , column 8 )
        (Ident (Identifier "equiv"))
    , Text "c"
    , Code
        "test/typ/math/spacing-02.typ"
        ( line 5 , column 16 )
        (Ident (Identifier "quad"))
    , MGroup
        (Just "(")
        (Just ")")
        [ Code
            "test/typ/math/spacing-02.typ"
            ( line 5 , column 22 )
            (Ident (Identifier "mod"))
        , Text "2"
        ]
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        text(body: [ ]), 
                        text(body: [b]), 
                        text(body: [,]), 
                        text(body: [a]), 
                        text(body: [ ]), 
                        text(body: [b]), 
                        text(body: [,]), 
                        text(body: [a]), 
                        text(body: [ ]), 
                        text(body: [b]), 
                        text(body: [,]), 
                        text(body: [a]), 
                        text(body: [ ]), 
                        text(body: [b]) }, 
                numbering: none), 
  text(body: [ ]), 
  linebreak(), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        text(body: [=]), 
                        text(body: [ ]), 
                        text(body: [b]) }, 
                numbering: none), 
  text(body: [ ]), 
  linebreak(), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        text(body: [-]), 
                        text(body: [b]), 
                        text(body: [≡]), 
                        text(body: [c]), 
                        text(body: [ ]), 
                        math.lr(body: ({ [(], 
                                         math.op(limits: false, 
                                                 text: "mod"), 
                                         text(body: [2]), 
                                         [)] })) }, 
                numbering: none), 
  parbreak() }
