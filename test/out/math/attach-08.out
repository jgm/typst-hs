--- parse tree ---
[ Code
    "test/typ/math/attach-08.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/attach-08.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/attach-08.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ MAttach
        (Just
           (MGroup
              Nothing
              Nothing
              [ Text "n"
              , Code
                  "test/typ/math/attach-08.typ"
                  ( line 3 , column 9 )
                  (FieldAccess (Ident (Identifier "r")) (Ident (Identifier "arrow")))
              , Code
                  "test/typ/math/attach-08.typ"
                  ( line 3 , column 11 )
                  (Ident (Identifier "oo"))
              , HardBreak
              , Text "n"
              , Text " grows"
              ]))
        Nothing
        (Code
           "test/typ/math/attach-08.typ"
           ( line 3 , column 3 )
           (Ident (Identifier "lim")))
    , MAttach
        (Just
           (MGroup
              Nothing
              Nothing
              [ Text "k"
              , Text "="
              , Text "0"
              , HardBreak
              , Text "k"
              , Code
                  "test/typ/math/attach-08.typ"
                  ( line 3 , column 40 )
                  (Ident (Identifier "in"))
              , Code
                  "test/typ/math/attach-08.typ"
                  ( line 3 , column 43 )
                  (Ident (Identifier "NN"))
              ]))
        (Just (Text "n"))
        (Code
           "test/typ/math/attach-08.typ"
           ( line 3 , column 27 )
           (Ident (Identifier "sum")))
    , Text "k"
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { math.attach(b: { text(body: [n]), 
                                         text(body: [→]), 
                                         text(body: [∞]), 
                                         linebreak(), 
                                         text(body: [n]), 
                                         text(body: [ grows]) }, 
                                    base: math.op(limits: true, 
                                                  text: "lim"), 
                                    t: none), 
                        math.attach(b: { text(body: [k]), 
                                         text(body: [=]), 
                                         text(body: [0]), 
                                         linebreak(), 
                                         text(body: [k]), 
                                         text(body: [∈]), 
                                         text(body: [ℕ]) }, 
                                    base: text(body: [∑]), 
                                    t: text(body: [n])), 
                        text(body: [k]) }, 
                numbering: none), 
  parbreak() }
