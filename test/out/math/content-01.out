--- parse tree ---
[ Code
    "test/typ/math/content-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/content-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/content-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Text "x"
    , Code
        "test/typ/math/content-01.typ"
        ( line 3 , column 5 )
        (FieldAccess
           (Ident (Identifier "eq")) (Ident (Identifier "colon")))
    , MFrac
        (Code
           "test/typ/math/content-01.typ"
           ( line 3 , column 9 )
           (FuncCall
              (Ident (Identifier "table"))
              [ KeyValArg (Identifier "columns") (Literal (Int 2))
              , BlockArg [ Text "x" ]
              , BlockArg [ Text "y" ]
              ]))
        (Code
           "test/typ/math/content-01.typ"
           ( line 3 , column 33 )
           (FuncCall
              (Ident (Identifier "mat"))
              [ BlockArg [ Text "1" ]
              , BlockArg [ Text "2" ]
              , BlockArg [ Text "3" ]
              ]))
    , Text "="
    , Code
        "test/typ/math/content-01.typ"
        ( line 4 , column 9 )
        (FuncCall
           (Ident (Identifier "table"))
           [ BlockArg [ Text "A" ]
           , BlockArg [ Text "B" ]
           , BlockArg [ Text "C" ]
           ])
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: true, 
                body: { text(body: [x]), 
                        text(body: [â‰”]), 
                        math.frac(denom: math.mat(rows: ((text(body: [1]), 
                                                          text(body: [2]), 
                                                          text(body: [3])))), 
                                  num: table(children: (text(body: [x]), 
                                                        text(body: [y])), 
                                             columns: 2)), 
                        text(body: [=]), 
                        table(children: (text(body: [A]), 
                                         text(body: [B]), 
                                         text(body: [C]))) }, 
                numbering: none), 
  parbreak() }
