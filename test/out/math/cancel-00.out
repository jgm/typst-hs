--- parse tree ---
[ Code
    "test/typ/math/cancel-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/cancel-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/cancel-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ Text "a"
    , Text "+"
    , Text "5"
    , Text "+"
    , Code
        "test/typ/math/cancel-00.typ"
        ( line 3 , column 10 )
        (FuncCall (Ident (Identifier "cancel")) [ BlockArg [ Text "x" ] ])
    , Text "+"
    , Text "b"
    , Code
        "test/typ/math/cancel-00.typ"
        ( line 3 , column 24 )
        (Ident (Identifier "minus"))
    , Code
        "test/typ/math/cancel-00.typ"
        ( line 3 , column 26 )
        (FuncCall (Ident (Identifier "cancel")) [ BlockArg [ Text "x" ] ])
    ]
, ParBreak
, Equation
    False
    [ Text "c"
    , Text "+"
    , MFrac
        (MGroup
           (Just "(")
           (Just ")")
           [ Text "a"
           , Code
               "test/typ/math/cancel-00.typ"
               ( line 5 , column 9 )
               (FieldAccess (Ident (Identifier "c")) (Ident (Identifier "dot")))
           , Code
               "test/typ/math/cancel-00.typ"
               ( line 5 , column 15 )
               (FuncCall
                  (Ident (Identifier "cancel"))
                  [ BlockArg
                      [ Text "b"
                      , Code
                          "test/typ/math/cancel-00.typ"
                          ( line 5 , column 24 )
                          (FieldAccess (Ident (Identifier "c")) (Ident (Identifier "dot")))
                      , Text "c"
                      ]
                  ])
           ])
        (MGroup
           Nothing
           Nothing
           [ Code
               "test/typ/math/cancel-00.typ"
               ( line 5 , column 35 )
               (FuncCall
                  (Ident (Identifier "cancel"))
                  [ BlockArg
                      [ Text "b"
                      , Code
                          "test/typ/math/cancel-00.typ"
                          ( line 5 , column 44 )
                          (FieldAccess (Ident (Identifier "c")) (Ident (Identifier "dot")))
                      , Text "c"
                      ]
                  ])
           ])
    ]
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  math.equation(block: false, 
                body: { text(body: [a]), 
                        text(body: [+]), 
                        text(body: [5]), 
                        text(body: [+]), 
                        math.cancel(body: text(body: [x])), 
                        text(body: [+]), 
                        text(body: [b]), 
                        text(body: [−]), 
                        math.cancel(body: text(body: [x])) }, 
                numbering: none), 
  parbreak(), 
  math.equation(block: false, 
                body: { text(body: [c]), 
                        text(body: [+]), 
                        math.frac(denom: math.cancel(body: { text(body: [b]), 
                                                             text(body: [·]), 
                                                             text(body: [c]) }), 
                                  num: { text(body: [a]), 
                                         text(body: [·]), 
                                         math.cancel(body: { text(body: [b]), 
                                                             text(body: [·]), 
                                                             text(body: [c]) }) }) }, 
                numbering: none), 
  parbreak() }
