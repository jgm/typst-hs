--- parse tree ---
[ Code
    "test/typ/compute/data-08.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compute/data-08.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compute/data-08.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compute/data-08.typ"
    ( line 3 , column 2 )
    (Let
       (BasicBind (Just (Identifier "data")))
       (FuncCall
          (Ident (Identifier "toml"))
          [ NormalArg (Literal (String "test/assets/files/toml-types.toml"))
          ]))
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "string")) (Ident (Identifier "data")))
       , NormalArg (Literal (String "wonderful"))
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 5 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "integer")) (Ident (Identifier "data")))
       , NormalArg (Literal (Int 42))
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 6 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "float")) (Ident (Identifier "data")))
       , NormalArg (Literal (Float 3.14))
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 7 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "boolean")) (Ident (Identifier "data")))
       , NormalArg (Literal (Boolean True))
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 8 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "date_time")) (Ident (Identifier "data")))
       , NormalArg (Literal (String "2023-02-01T15:38:57Z"))
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 9 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "array")) (Ident (Identifier "data")))
       , NormalArg
           (Array
              [ Reg (Literal (Int 1))
              , Reg (Literal (String "string"))
              , Reg (Literal (Float 3.0))
              , Reg (Literal (Boolean False))
              ])
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 10 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "inline_table")) (Ident (Identifier "data")))
       , NormalArg
           (Dict
              [ Reg ( Identifier "first" , Literal (String "amazing") )
              , Reg ( Identifier "second" , Literal (String "greater") )
              ])
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 11 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "element"))
              (FieldAccess
                 (Ident (Identifier "table")) (Ident (Identifier "data"))))
       , NormalArg (Literal (Int 5))
       ])
, SoftBreak
, Code
    "test/typ/compute/data-08.typ"
    ( line 12 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FieldAccess
              (Ident (Identifier "others"))
              (FieldAccess
                 (Ident (Identifier "table")) (Ident (Identifier "data"))))
       , NormalArg
           (Array
              [ Reg (Literal (Boolean False))
              , Reg (Literal (String "indeed"))
              , Reg (Literal (Int 7))
              ])
       ])
, ParBreak
]
--- evaluated ---
{ text(body: [
]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  text(body: [
]), 
  text(body: [✅]), 
  parbreak() }
